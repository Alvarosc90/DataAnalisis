# -*- coding: utf-8 -*-
"""Analisis de inmuebles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19gI09pBpiKgC-0IW9mJ3Tve0EvZooMHW
"""

from google.colab import drive
import io
import os
import pandas as pd

#montar drive
drive.mount('/content/gdrive/')

inmuebles = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/inmuebles_bogota.csv')
inmuebles.head()

inmuebles.shape

inmuebles.columns

# renombrar columnas para evitar errores de tipeo
columnas = {'Baños':'Banos', 'Área':'Area'}
inmuebles = inmuebles.rename(columns=columnas)
inmuebles.sample(10) #muestra de 10 elementos

inmuebles.info()
#UPZ Unidades de planeacion social, sirven para optar politicas

inmuebles.iloc[150:152]

sum( inmuebles.Barrio == 'Chico Reservado')

inmuebles_chico = (inmuebles.Barrio == 'Chico Reservado')

dfchicoreser = inmuebles[inmuebles_chico]
dfchicoreser.mean()#Promedio para ese barrio

len(inmuebles.Barrio.value_counts())

inmuebles.Barrio.value_counts()

len(inmuebles.UPZ.value_counts())

inmuebles.UPZ.value_counts()

inmuebles_Barrio = inmuebles.Barrio.value_counts()
inmuebles_Barrio.head(10).plot.bar()

inmuebles_Barrio.mean()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

Moneda = inmuebles.Valor.str.split(expand=True) #tengo q transformar el panda series a un string y luego convertirlo a una lista, expand devuelve un dataframe de dos columnas
inmuebles['Simbolo']=Moneda[0]
inmuebles['Precio']=Moneda[1]
inmuebles.sample()
inmuebles.info()

inmuebles['Precio']=inmuebles['Precio'].str.replace('.','',regex=True)
inmuebles[['Precio','Barrio']]

inmuebles['PrecioEnMillon']=inmuebles.Precio.astype('float')/1000000 #convertir en float y restarle ceros para mayor legibildad
inmuebles.info()

inmuebles[['PrecioEnMillon','Barrio']]

inmuebles.describe()

pd.set_option('display.precision',2)
pd.set_option('display.float_format',lambda x:'%.2f' %x)#reducimos menos cantidad de 0, para mayor legibilidad
inmuebles.describe()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8,6))
grafica=sns.histplot(data=inmuebles, x='PrecioEnMillon', kde=True, hue='Tipo')#kde linea de distribucion, Hue nos muestra por categorias o tipos
grafica.set_title('Distribuciones de Valores de inmuebles por millones') #Agrego un titulo a la grafica
plt.xlim((50,1000))#configuro los limites para una mejor distribucion
#plt.ylim((0,50))
#plt.savefig('/content/drive/MyDrive/Bases de datos/imagenventa.png',format='png')#guardando la imagen
plt.show()

plt.figure(figsize=(8,6))
grafica=sns.histplot(data=inmuebles, x='Tipo',y='PrecioEnMillon', kde=True, hue='Tipo')#kde linea de distribucion, Hue nos muestra por categorias o tipos
grafica.set_title('Distribuciones de Valores de inmuebles por millones')
plt.xlabel('tipos')
plt.ylabel('Millones')
plt.ylim((0,5000))
plt.show()

inmuebles['PrecioM2enM']= inmuebles['PrecioEnMillon']/inmuebles['Area'] #Valor en millones del M2
DatosDeBarrio=inmuebles.groupby('Barrio').mean() #Promedio por barrio para todas las columnas numericas
DatosDeBarrio

DatosDeBarrio['PrecioM2Barrio'] = DatosDeBarrio['PrecioEnMillon']/DatosDeBarrio['Area']
DatosDeBarrio

M2_Barrio = dict(DatosDeBarrio['PrecioM2Barrio'])
inmuebles['PrecioM2Barrio'] = inmuebles['Barrio']
inmuebles['PrecioM2Barrio'] = inmuebles['PrecioM2Barrio'].map(M2_Barrio)
inmuebles.head(5)

topBarrios = inmuebles['Barrio'].value_counts()[:10].index #Top Ten de los Barrios

DatosDeBarrio.reset_index(inplace=True) # reemplazamos el indice barrio
DatosDeBarrio

DatosDeBarrio.query('Barrio in @topBarrios')#consultamos el top de los barrios

plt.figure(figsize=(10,8))
ax=sns.barplot(data = DatosDeBarrio.query('Barrio in @topBarrios') , x = 'Barrio', y ='PrecioM2Barrio') #Grafico de barras de la consulta de los primeros 10 Barrios
ax.tick_params(axis='x', rotation=45) #Indicadores de cada punto (Los nombres de los label rotan en 45 grados)

plt.figure(figsize=(10,8))
ax=sns.boxplot(data = inmuebles.query('Barrio in @topBarrios') , x = 'Barrio', y ='PrecioM2enM')
ax.tick_params(axis='x', rotation=45)
plt.show

plt.figure(figsize=(10,8))
ax=sns.boxplot(data = inmuebles.query('Barrio in @topBarrios & Area<500') , x = 'Barrio', y ='Area')
ax.tick_params(axis='x', rotation=45)
plt.show

plt.figure(figsize=(10,8))
ax=sns.boxplot(data = inmuebles.query('Barrio in @topBarrios & PrecioEnMillon < 3000') , x = 'Barrio', y ='PrecioEnMillon')
ax.tick_params(axis='x', rotation=45)
plt.show

datos_raw = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/Identificación (Capítulo A).csv',sep=';',encoding='latin-1')
datos_raw.shape
datos_raw

datos_raw = datos_raw.loc[datos_raw.MPIO == 11001]
datos_raw.shape

datos_b = pd.read_csv('//content/gdrive/MyDrive/Bases de datos/Datos de la vivenda y su entorno (Capítulo B).csv',sep=';',encoding='latin-1')
datos_c = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/Condiciones habitacionales del hogar (Capítulo C).csv',sep=';',encoding='latin-1')
datos_e = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/Composición del hogar y demografía (Capítulo E).csv',sep=';',encoding='latin-1')
datos_h = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/Educación (Capítulo H).csv',sep=';',encoding='latin-1')
datos_l = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/Percepción sobre las condiciones de vida y el desempeño institucional (Capítulo L).csv',sep=';',encoding='latin-1')
datos_k = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/Fuerza de trabajo (Capítulo K).csv',sep=';',encoding='latin-1')

datos_dane = pd.merge(datos_raw,datos_b, on='DIRECTORIO' ,how='left' )
datos_dane.shape

datos_dane = pd.merge(datos_dane,datos_c, on='DIRECTORIO' ,how='left' )
datos_dane.shape

datos_dane = pd.merge(datos_dane,datos_e, on='DIRECTORIO' ,how='left' )
datos_dane.shape

#datos_dane = pd.merge(datos_dane,datos_h, on='DIRECTORIO' ,how='left' )
#datos_dane.shape

datos_dane.info()

datos_dane = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/datos_dane.csv')
datos_dane.head()

datos_dane.info()

dic_dane = {
       'NVCBP4':'CONJUNTO_CERRADO',
       'NVCBP14A':'FABRICAS_CERCA', 'NVCBP14D':'TERMINALES_BUS', 'NVCBP14E':'BARES_DISCO',
       'NVCBP14G':'OSCURO_PELIGROSO', 'NVCBP15A':'RUIDO', 'NVCBP15C':'INSEGURIDAD',
       'NVCBP15F':'BASURA_INADECUADA', 'NVCBP15G':'INVASION','NVCBP16A3':'MOV_ADULTOS_MAYORES',
       'NVCBP16A4':'MOV_NINOS_BEBES',
       'NPCKP17':'OCUPACION','NPCKP18':'CONTRATO','NPCKP23':'SALARIO_MES',
       'NPCKP44A':'DONDE_TRABAJA', 'NPCKPN62A':'DECLARACION_RENTA',
       'NPCKPN62B':'VALOR_DECLARACION', 'NPCKP64A':'PERDIDA_TRABAJO_C19',
       'NPCKP64E':'PERDIDA_INGRESOS_C19',
       'NHCCP3':'TIENE_ESCRITURA', 'NHCCP6':'ANO_COMPRA', 'NHCCP7':'VALOR_COMPRA', 'NHCCP8_1':'HIPOTECA_CRED_BANCO',
       'NHCCP8_2':'OTRO_CRED_BANCO', 'NHCCP8_3':'CRED_FNA', 'NHCCP8_6':'PRESTAMOS_AMIGOS',
       'NHCCP8_7':'CESANTIAS', 'NHCCP8_8':'AHORROS', 'NHCCP8_9':'SUBSIDIOS',
       'NHCCP9':'CUANTO_PAGARIA_MENSUAL', 'NHCCP11':'PLANES_ADQUIRIR_VIVIENDA',
       'NHCCP11A':'MOTIVO_COMPRA', 'NHCCP12':'RAZON_NO_ADQ_VIV', 'NHCCP41':'TIENE_CARRO','NHCCP41A':'CUANTOS_CARROS',
       'NHCCP47A':'TIENE_PERROS', 'NHCCP47B':'TIENE_GATOS', 'NHCLP2A':'VICTIMA_ATRACO', 'NHCLP2B':'VICTIMA_HOMICIDIO',
       'NHCLP2C':'VICTIMA_PERSECUSION',
       'NHCLP2E':'VICTIMA_ACOSO', 'NHCLP4':'COMO_VIVE_ECON', 'NHCLP5':'COMO_NIVEL_VIDA',
       'NHCLP8AB':'REACCION_OPORTUNA_POLICIA', 'NHCLP8AE':'COMO_TRANSPORTE_URBANO', 'NHCLP10':'SON_INGRESOS_SUFICIENTES',
       'NHCLP11':'SE_CONSIDERA_POBRE', 'NHCLP29_1A':'MED_C19_TRABAJO',
       'NHCLP29_1C':'MED_C19_CAMBIO_VIVIENDA', 'NHCLP29_1E':'MED_C19_ENDEUDAMIENTO',
       'NHCLP29_1F':'MED_C19_VENTA_BIENES','NPCHP4':'NIVEL_EDUCATIVO'
       }

datos_dane = datos_dane.rename(columns=dic_dane)
datos_dane.columns

datos_dane.info()

datos_dane.groupby('NOMBRE_ESTRATO')[['CONJUNTO_CERRADO','INSEGURIDAD','TERMINALES_BUS','BARES_DISCO','RUIDO','OSCURO_PELIGROSO','SALARIO_MES','TIENE_ESCRITURA','PERDIDA_TRABAJO_C19','PERDIDA_INGRESOS_C19','PLANES_ADQUIRIR_VIVIENDA']].mean().head()

datos = datos_dane[['NOMBRE_ESTRATO','CONJUNTO_CERRADO','INSEGURIDAD','TERMINALES_BUS','BARES_DISCO','RUIDO','OSCURO_PELIGROSO','SALARIO_MES','TIENE_ESCRITURA','PERDIDA_TRABAJO_C19','PERDIDA_INGRESOS_C19','PLANES_ADQUIRIR_VIVIENDA']].replace(2,0)
datos.head()

datos_tratados = datos.groupby('NOMBRE_ESTRATO')[['CONJUNTO_CERRADO','INSEGURIDAD','TERMINALES_BUS','BARES_DISCO','RUIDO','OSCURO_PELIGROSO','SALARIO_MES','TIENE_ESCRITURA','PERDIDA_TRABAJO_C19','PERDIDA_INGRESOS_C19','PLANES_ADQUIRIR_VIVIENDA']].mean().head()

datos.loc[datos.NOMBRE_ESTRATO == '20 de Julio'] #no reemplaza cuando los valores son STRING. ya que en replace pusimos que remplace solos numericos

datos_tratados

datos_tratados = datos.groupby('NOMBRE_ESTRATO')[['CONJUNTO_CERRADO','INSEGURIDAD','TERMINALES_BUS','BARES_DISCO','RUIDO','OSCURO_PELIGROSO','SALARIO_MES','TIENE_ESCRITURA','PERDIDA_TRABAJO_C19','PERDIDA_INGRESOS_C19','PLANES_ADQUIRIR_VIVIENDA']].mean()
datos_tratados

pd.merge(inmuebles,datos_tratados, left_on='UPZ',right_on='NOMBRE_ESTRATO', how='left')

datos_ml=pd.merge(inmuebles,datos_tratados, left_on='UPZ',right_on='NOMBRE_ESTRATO', how='left')
datos_ml.info()

upz = pd.read_csv('/content/gdrive/MyDrive/Bases de datos/cod_upz.csv')
datos_ml = pd.merge(datos_ml, upz, left_on='UPZ', right_on='NOMBRE_ESTRATO',how='inner') #remplazamos la columna nombre strato por upz y concatenamos en una nueva tabla conjunta
datos_ml.head()

datos_ml.shape

datos_ml.info()

plt.figure(figsize=(10,8))
sns.boxplot(data=datos_ml, y= 'PrecioEnMillon')
plt.show()

datos_ml.query('PrecioEnMillon > 5000 | PrecioEnMillon < 60')

datos_ml= datos_ml.query('PrecioEnMillon < 1200 & PrecioEnMillon > 60')
datos_ml

plt.figure(figsize=(10,8))
sns.boxplot(data=datos_ml, y= 'PrecioEnMillon')
plt.show()

datos_ml['SALARIO_ANUAL_MI'] = datos_ml['SALARIO_MES']*12/1000000
datos_ml['SALARIO_ANUAL_MI']

datos_ml.info()

plt.figure(figsize=(10,8))
sns.scatterplot(data=datos_ml,x='SALARIO_ANUAL_MI', y= 'PrecioM2enM')
plt.ylim((0,15))
plt.show()

datos_ml.corr() #mostramos la correlacion entre las variables, con mas cercano a 1 mas correlacion entre variables,

plt.figure(figsize=(18,8))
heatmap= sns.heatmap(datos_ml.corr(),vmin=-1,vmax=1,annot=True, cmap='BrBG')
heatmap.set_title('Correlacion de Variables', fontdict={'fontsize':18},pad=16);

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

X = datos_ml[['COD_UPZ_GRUPO','Banos','Habitaciones']]
y = datos_ml[['PrecioEnMillon']]

X_train,X_test,Y_train,Y_test = train_test_split(X,y, test_size=0.25, random_state=99)

X_test

X_train

Y_train

Y_test

modelo = LinearRegression()

modelo.fit(X_train,Y_train)
LinearRegression()

y_predict_test= modelo.predict(X_test)

from sklearn.metrics import mean_absolute_error, r2_score
baseline_mae = mean_absolute_error(Y_test, y_predict_test)
baseline_mae

baseline_r2 = r2_score(Y_test, y_predict_test)
baseline_r2

X = datos_ml[['COD_UPZ_GRUPO','Habitaciones','Banos','CONJUNTO_CERRADO','SALARIO_ANUAL_MI','TIENE_ESCRITURA']] #

Y = datos_ml["PrecioEnMillon"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 99)
modelo_1 = LinearRegression()
modelo_1.fit(X_train, y_train)
y_predict_test = modelo_1.predict(X_test)
y_predict_train = modelo_1.predict(X_train)
mae_test = mean_absolute_error(y_test, y_predict_test)
r2_test = r2_score(y_test, y_predict_test)
mae_train = mean_absolute_error(y_train, y_predict_train)
r2_train = r2_score(y_train, y_predict_train)
print(mae_test,r2_test)
print(mae_train,r2_train)

modelo_1.predict([[816,5,3,1,60,1]])